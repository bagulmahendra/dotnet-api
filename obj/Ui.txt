Sure, let's create a React UI that includes a grid of records. When a user clicks on a record, it will show a group of PDF documents along with extracted information from them. We'll again break it down into steps:

1. **Setup a React Project**
2. **Install necessary dependencies**
3. **Create components for the grid, PDF display, and extracted information**
4. **Add styling for a fancy look**
5. **Deploy the application**

### 1. Setup a React Project

First, ensure you have Node.js installed. Then, create a new React project using Create React App.

```bash
npx create-react-app pdf-grid-viewer
cd pdf-grid-viewer
```

### 2. Install necessary dependencies

We'll need several packages:
- `react-pdf` for rendering PDFs
- `pdfjs-dist` for PDF manipulation
- `styled-components` for styling

Install these dependencies:

```bash
npm install @react-pdf-viewer/core @react-pdf-viewer/default-layout pdfjs-dist styled-components
```

### 3. Create components for the grid, PDF display, and extracted information

Create the following component files:

#### `src/components/Grid.js`

```jsx
import React from 'react';
import styled from 'styled-components';

const Grid = ({ records, onSelect }) => {
  return (
    <GridContainer>
      {records.map((record, index) => (
        <GridItem key={index} onClick={() => onSelect(record)}>
          {record.name}
        </GridItem>
      ))}
    </GridContainer>
  );
};

const GridContainer = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 20px;
  padding: 20px;
`;

const GridItem = styled.div`
  background-color: #fff;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  cursor: pointer;
  transition: transform 0.2s;

  &:hover {
    transform: scale(1.05);
  }
`;

export default Grid;
```

#### `src/components/PdfViewer.js`

```jsx
import React, { useState } from 'react';
import { Document, Page } from 'react-pdf';
import styled from 'styled-components';

const PdfViewer = ({ pdf }) => {
  const [numPages, setNumPages] = useState(null);

  const onDocumentLoadSuccess = ({ numPages }) => {
    setNumPages(numPages);
  };

  return (
    <PdfContainer>
      <Document file={pdf} onLoadSuccess={onDocumentLoadSuccess}>
        {Array.from(new Array(numPages), (el, index) => (
          <Page key={`page_${index + 1}`} pageNumber={index + 1} />
        ))}
      </Document>
    </PdfContainer>
  );
};

const PdfContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
  background-color: #f5f5f5;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
`;

export default PdfViewer;
```

#### `src/components/ExtractedInfo.js`

```jsx
import React from 'react';
import styled from 'styled-components';

const ExtractedInfo = ({ info }) => {
  return (
    <InfoContainer>
      <h2>Extracted Information</h2>
      <pre>{JSON.stringify(info, null, 2)}</pre>
    </InfoContainer>
  );
};

const InfoContainer = styled.div`
  margin: 20px;
  padding: 20px;
  background-color: #e8f4fc;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
`;

export default ExtractedInfo;
```

#### `src/App.js`

```jsx
import React, { useState } from 'react';
import styled from 'styled-components';
import Grid from './components/Grid';
import PdfViewer from './components/PdfViewer';
import ExtractedInfo from './components/ExtractedInfo';
import samplePdf from './sample.pdf';

const App = () => {
  const [selectedRecord, setSelectedRecord] = useState(null);
  const [extractedInfo, setExtractedInfo] = useState({});
  const [pdfs, setPdfs] = useState([samplePdf]);

  const records = [
    { id: 1, name: 'Record 1' },
    { id: 2, name: 'Record 2' },
    { id: 3, name: 'Record 3' },
    // Add more records as needed
  ];

  const extractInfoFromPdf = (pdf) => {
    // Placeholder function to extract information from PDF
    // Implement your logic here to extract the needed information
    setExtractedInfo({
      title: 'Sample PDF',
      author: 'Author Name',
      content: 'Extracted content here...'
    });
  };

  const handleSelectRecord = (record) => {
    setSelectedRecord(record);
    // Placeholder: Set PDFs for the selected record
    setPdfs([samplePdf, samplePdf]);
    extractInfoFromPdf(samplePdf);
  };

  return (
    <Container>
      <Header>PDF Grid Viewer</Header>
      {!selectedRecord ? (
        <Grid records={records} onSelect={handleSelectRecord} />
      ) : (
        <Main>
          {pdfs.map((pdf, index) => (
            <PdfViewer key={index} pdf={pdf} />
          ))}
          <ExtractedInfo info={extractedInfo} />
        </Main>
      )}
    </Container>
  );
};

const Container = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
  background-color: #f0f0f0;
`;

const Header = styled.h1`
  font-size: 2rem;
  color: #333;
`;

const Main = styled.div`
  display: flex;
  justify-content: space-around;
  width: 100%;
`;

export default App;
```

### 4. Add styling for a fancy look

We used `styled-components` to handle our styles. You can tweak the styles in the `styled-components` blocks to achieve the desired look.

### 5. Deploy the application

To deploy the application, you can use a service like Vercel or Netlify. Both services offer free plans and easy deployment options.

#### Deploying to Vercel

1. Install the Vercel CLI:
   ```bash
   npm install -g vercel
   ```

2. Deploy the application:
   ```bash
   vercel
   ```

Follow the prompts to deploy your application. Your React app will be live on a Vercel URL.

#### Deploying to Netlify

1. Install the Netlify CLI:
   ```bash
   npm install -g netlify-cli
   ```

2. Build the application:
   ```bash
   npm run build
   ```

3. Deploy the application:
   ```bash
   netlify deploy --dir=build
   ```

Follow the prompts to deploy your application. Your React app will be live on a Netlify URL.

### Conclusion

With these steps, you should have a fully functional React application that displays a grid of records and shows PDFs with extracted information when a record is clicked. You can further enhance the application by improving the PDF extraction logic and adding more features as needed.
